// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disNeging
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array arr;
	field int lenOfStr;
	field int arrLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	if(maxLength=0){
	   let maxLength=1;
	}
	let lenOfStr = 0;
	let arrLength = maxLength;
	let arr = Array.new(arrLength); 
	return this;
    }

    /** Returns the current length of this string. */
    method int length() {
	return lenOfStr;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	let arr[j] = c;
	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	if(lenOfStr < arrLength){
	      let arr[lenOfStr] = c;
	      let lenOfStr = lenOfStr+1;	
    	}
	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	if(lenOfStr >0){
	    let lenOfStr = lenOfStr-1;
	   }
       return;
    }

    /** Disposes this string. */
     method void dispose() {
        do arr.dispose();
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isNeg;
        var int val;
        var int i;

        let val = 0;
        if((lenOfStr > 0) & (arr[0] = 45) ) {      
            let isNeg = true;
            let i = 1;
        }
        else {
            let isNeg = false;
            let i = 0;
        }
       
        while( (i < lenOfStr) &  ~(arr[i] < 48) & ~(arr[i] > 57) ) {
            let val = (val * 10) + arr[i] - 48;
            let i = i+1;
        }
        if(isNeg) {
            return -val;
        }
        else {
            return val;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let lenOfStr = 0;   
        if( val < 0 ) {
            let val = -val;
            do appendChar(45);     
        }
        do setIntNumber(val);
        return;
        }

    method void setIntNumber(int val){
        var int tmp;
        var int modolu;
        var char c;

        let tmp = val / 10;
        let modolu = val - (tmp*10);
        let c = String.stringConvert(modolu);
        if(val<10 ) {
            do appendChar(c);
        }
        else {
            do setIntNumber(tmp);
            do appendChar(c);
        }
        return;
    }

    function car stringConvert(int num){
        return num+48;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
    return;
    } 

    function char keyPressed() {
        return Memory.peek(24576);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c;
        while (Keyboard.keyPressed()=0) {

        }

        let c = Keyboard.keyPressed();

        while (~(Keyboard.keyPressed()=0)) {

        }

        if (c = String.backSpace()) 
        {return c;
        }
        if (c = String.newLine()) {
        return c;
        }
        do Output.printChar(c);
        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
		// You can assume input is at most 64 characters long.
		// Why? Because this is the width of our screen!
    var String str;
    var char c;
    let str = String.new(64);

    do Output.printString(message);
    while(true)
    {
        let c = Keyboard.readChar();
        if (c = String.newLine())
        {
            do Output.println();
            return str;
        }
        if (c = String.backSpace())
        {
            if (str.length()>0)
            {
                do Output.backSpace();
                do str.eraseLastChar();
            }
        }
        else
        {
            let str = str.appendChar(c);
        }
    }


    return str;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
    var String str;
    let str = Keyboard.readLine(message);
    return str.intValue();
    }
}

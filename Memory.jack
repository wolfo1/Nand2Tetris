// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int freeList;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let heap = freeList;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        var int currentSize;
        var int block;
        
        let heap = freeList;
        let currentSize = heap[1];
        
        while ((~(heap = 0)) & (currentSize < (size + 2))) {
            let heap = heap[0];
            let currentSize = heap[1];
        }
        if (heap = 0) {
            do Sys.error(1);
        }   
        let heap[1] = (currentSize-size-2);
        let block = ((heap+currentSize+2)-size);
        let heap = (block-2);
        let heap[0] = 0;
        let heap[1] = size;
        
        return block;
    }

    /** De-allocates the given o (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let heap = o-2;
        let heap[0] = freeList;
        let freeList = heap;       
        return;
    }    

    /** Returns the maximal element contained in the given Array/o. 
     * Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int size;
        var int maximum;
        var int temp; 
        var int count;

        let size = o-1;  
        let maximum = o[0];
        let count = 1;
        while(count<size) {
            let maximum = Math.max(maximum, o[count]);
            let count = count + 1;
        }
        return maximum;
    }
}